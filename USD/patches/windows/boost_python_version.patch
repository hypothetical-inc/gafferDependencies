From 4a8ce9066a3c66ca0e21b124eabb29070570d7d4 Mon Sep 17 00:00:00 2001
From: sunyab <sunyab@users.noreply.github.com>
Date: Mon, 23 Mar 2020 20:34:16 -0700
Subject: [PATCH] Fix boost_python build error for boost 1.67+

The library name for boost_python is suffixed with
the associated version of Python as of boost 1.67.
This change updates the build system to detect the
boost version and use the appropriate component name.

(Internal change: 2050699)
---
 cmake/defaults/Packages.cmake | 30 ++++++++++++++++++++++++++++--
 1 file changed, 28 insertions(+), 2 deletions(-)

diff --git a/cmake/defaults/Packages.cmake b/cmake/defaults/Packages.cmake
index 43679dd2f..799b39d2d 100644
--- a/cmake/defaults/Packages.cmake
+++ b/cmake/defaults/Packages.cmake
@@ -42,14 +42,40 @@ if(PXR_ENABLE_PYTHON_SUPPORT)
     find_package(PythonInterp 2.7 REQUIRED)
     find_package(PythonLibs 2.7 REQUIRED)
 
-    # --Boost
     find_package(Boost
         COMPONENTS
             program_options
-            python
         REQUIRED
     )
 
+    if (((${Boost_VERSION_STRING} VERSION_GREATER_EQUAL "1.67") AND
+         (${Boost_VERSION_STRING} VERSION_LESS "1.70")) OR
+        ((${Boost_VERSION_STRING} VERSION_GREATER_EQUAL "1.70") AND
+          Boost_NO_BOOST_CMAKE))
+        # As of boost 1.67 the boost_python component name includes the
+        # associated Python version (e.g. python27, python36). After boost 1.70
+        # the built-in cmake files will deal with this. If we are using boost
+        # that does not have working cmake files, or we are using a new boost
+        # and not using cmake's boost files, we need to do the below.
+        #
+        # Find the component under the versioned name and then set the generic
+        # Boost_PYTHON_LIBRARY variable so that we don't have to duplicate this
+        # logic in each library's CMakeLists.txt.
+        set(python_version_nodot "${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}")
+        find_package(Boost
+            COMPONENTS
+                python${python_version_nodot}
+            REQUIRED
+        )
+        set(Boost_PYTHON_LIBRARY "${Boost_PYTHON${python_version_nodot}_LIBRARY}")
+    else()
+        find_package(Boost
+            COMPONENTS
+                python
+            REQUIRED
+        )
+    endif()
+
     # --Jinja2
     find_package(Jinja2)
 else()
